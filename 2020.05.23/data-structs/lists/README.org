* List in Dart

Today I'm going to dive into lists in dart. This is a big topic due to the size
of the API and also because Lists are the most used data structure.

Though there are many types of lists, I'm going to start of with ~Growalble
Lists~ as they are used the most, we'll talk about other kind of lists later.

** Initial notes

*** Dart does not have arrays only lists
    Makes sense, arrays are very efficient but are hard(er) to use than
    lists. In the domains that Dart excels at browser, flutter etc. the need of
    raw speed is diminished, instead developer productivity is emphasised.
     
*** Fully featured
    API is fairly complete and compares favourably with other programming
    languages like JavaScript, python, ruby.
 
** Common properties
   A few properties that gets used a lot ...

   #+BEGIN_SRC dart
   // Make a new list. Note: dart has special syntax for list literals
   // Dart is typed so this is a list of ints. 
   var list = [1, 2, 3, 4];

   // Get the length of list
   list.length

   // The first and last elements of list
   list.first
   list.last

   // A iterable with the elements of this list reversed
   list.reversed
   
   // Check if the list is empty
   list.isEmpty
   #+END_SRC


** Common methods

*** add
    Append elements the end of the list

   #+BEGIN_SRC dart
   var list = [1, 2, 3, 4];

   // add 5 to the end of the list
   list.add(5);

   // adding multiple elements using the cascade (..) operator
   list
   ..add(6)
   ..add(7);
   #+END_SRC

*** remove
    Removes the first occurrence of an object in a list.

    - If an instance of the object exist in the list then it will remove the
      first occurrence and return ~true~.
    - If the object is not in the list, it will not modify the list and
      ~false~ is returned.

    #+BEGIN_SRC dart
    var list = [1, 2, 3, 4, 4, 5]
    
    // remove 4
    list.remove(4)  // -> list is now [1, 2, 3, 4, 5] and returns true

    // remove 8, which does not exist in the list
    list.remove(8)  // -> list is still [1, 2, 3, 4, 5] and returns false
    #+END_SRC


** Indexing
   In Dart indexing is basic. Let me explain; in python we can have negative
   indexes (count from the end), slices and a lot more fun stuff. In Dart there
   is none of that, here your give an index position you get access to that
   position in the list.

   #+BEGIN_SRC dart
   var list = [1, 2, 3]
   
   // accessing elements
   list[0]   // -> 1
   list[10]  // throws RangeError

   // Modifiying elements
   list[0] = 15   // The value of list is now [15, 2, 3]
   list[10] = 15  // also throws RangeError
   #+END_SRC


** Functional operations
   The following list operations come from a functional programming. In Dart
   they are implemented in the Iterable<T> class.  So mapping on a List produces
   an Iterator and not a list, which is a little disconcerting at first. It's
   different from other programming languages and takes getting used to.
   
*** map
    In traditional functional programming languages a map takes in a list and
    returns a new list. It also takes in a function, this function is applied to
    each element of the input list and this makes up the output list.

    In Dart map is defined on the ~Iterable~ class and hence returns a
    ~Iterable~ not a ~List~.

    #+BEGIN_SRC dart
    var list = [1, 2, 3];

    // function that takes in an int and returns the double of that int
    int double(int x) {
      return 2 * x;
    };
    
    list.map(double);  // -> return Iterable with elements (2, 4, 6)
    
    // Usually we use lamdas to write the same more compactly
    list.map((x) => 2 * x);  // -> again returns Iterable with elements (2, 4, 6)
    #+END_SRC
    
*** where
    Traditionally called ~filter~, this function returns only those element that
    satisfy a predicate. Which means only those elements when applied to
    function f they return true. To show how this works, the following example
    throws out all the odd elements and keeps the even elements.

    #+BEGIN_SRC dart
    var list = [1, 2, 3, 4, 5, 6];

    // Filters out only odd elements and keep the even ones
    list.where((x) => x % 2 == 0);
    #+END_SRC
    
*** fold
    Another stable of functional programming, it's used to aggregate the values
    of a list, the type of aggregation is specified by the function passed to
    fold.

    Fold takes in two parameters, 
    1. The initial value of the aggregation
    2. Function that does the aggregation

    Let's do the simplest of aggregation, sum the elements of a list.

    #+BEGIN_SRC dart
    var list = [1, 2, 3, 4, 5, 6];
    
    list.fold(0, (aggregrate, element) => element + aggregrate);
    #+END_SRC

 
*** reduce
    This is a simplified version of ~fold~. Here the aggregate is the same type
    as elements in the list. In fold the operations start with the initial value
    here the operations start with first value. 

    Again let's sum the values in a list.

    #+BEGIN_SRC dart    
    var list = [1, 2, 3, 4, 5, 6];

    list.reduce((aggregrate, element) => element + aggregrate);
    #+END_SRC



*** forEach
    This is actually not a "pure" function like the ones above ie. it does not
    return an iterator but depends on "side effects". It executes the input
    function once for each element of the list.
    
    #+BEGIN_SRC dart
    var list = [1, 2, 3, 4, 5, 6];
    
    list.forEach((element) => print(element));
    #+END_SRC


** Fixed Length and Growable Lists

   There are two types of lists Fixed Length and Growable. The distinction in
   Dart is a little odd. ~List~ class implements both algorithms, and the
   instantiation decides weather it is fixed or growable.

*** Fixed Length Lists
    With fixed length lists all API which changes the size of the ~List~ throws
    an error. Duh! it's a "fixed length" list.

    What makes a fixed length list? A list constructor with length parameter,
    that's all. All other initialization will make a growable list.

    #+BEGIN_SRC dart
    var fixedList = List<int>(5);

    // thorws an error
    fixedList.add(10);

    // Can't resize the list either throws an error
    fixedList.length = 10;
    #+END_SRC

*** Growable Lists
    Every other initialization will produce a growable list. It's what you want
    most of the time.

    #+BEGIN_SRC dart
    List<int> lst;

    // A growable list
    lst = List<int>();

    // Also a growable list
    lst = [1, 2, 3];

    // now API that modify the size work
    lst.add(4);
    lst.length = 10;
    #+END_SRC


    

