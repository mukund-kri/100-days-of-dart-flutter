* TODO constructors

** Aim
   In this article I'm going to explore constructors in the Dart language. Turns
   out the constructor semantics in Dart are far richer than any language I'v
   encountered. Here goes ...

   I'm going play with a made up example, a Configuration class that loads and
   stores the configuration of an utility that help me do the "100 days of Dart"
   challenge.

** Plain classes   
   Let's start of with Configuration class, with no (explicit) constructor.    
   #+BEGIN_SRC dart
   class Configuration {
     String rootFolder;
     String programmingLanguage;
   }

   // create an configuration object
   var config = Configuration();

   // and set the values
   config.rootFolder = '/home/skywalker/100DaysOfCode';
   config.programmingLanguage = 'Dart';

   // Alternativlly we can use the cascade (..) operator 
   config
   ..rootFolder = '/home/skywalker/100DaysOfCode'
   ..programmingLanguage = 'Dart';

   #+END_SRC


** Simple Constructors
   Since this article is on ~constructors~ you know what's coming next. Let's
   make the code better with a simple constructor.

   So what's a constructor? It's a specalized method which is automatically run
   when an instance (object) of this class is created. We can do almost any
   thing in this method (more on what we can't do later), but in this case we'll
   just initialize the ~rootFolder~ and ~programmingLanguage~. 

   #+BEGIN_SRC dart
   class Configuration {
     String rootFolder;
     String programmingLanguage;

     // Now setting of parameters is the done by the constructor
     Configuration(String rootFolder, String programmingLanguage) {
       this.rootFolder = rootFolder;
       this.programmingLanguage = programmingLanguage;
     }
   }

   void main() {
     // create an configuration object
     var config = Configuration(
       '/home/skywalker/100DaysOfDart',
       'Dart',
     );
   }
   #+END_SRC


   This assignments in the constructor looks kind of repetitive, fortunatly Dart
   gives us some ~syntatic sugar~. The example now looks like

   #+BEGIN_SRC dart
   class Configuration {
     String rootFolder;
     String programmingLanguage;

     // Same as the previous example, with some syntactic sugar
     Configuration(this.rootFolder, this.programmingLanguage) {}
   }

   void main() {
     // create an configuration object
     var config = Configuration(
       '/home/skywalker/100DaysOfDart',
       'Dart',
     );
   }
   #+END_SRC

   Note: If the parameter name is prefixed with ~this.~ it automatically set the
   variable name <<clean up this sentence>>.

   OK that's a little better. Let's use the concept of named parameters and
   default values covered in the functions section to work this example into
   declarative style used in flutter.

   #+BEGIN_SRC dart
   class Configuration {
     String rootFolder;
     String programmingLanguage;

     // With named and optional paramters
     Configuration({this.rootFolder, this.programmingLanguage = 'dart'}) {}
   }

   void main() {
     var config = Configuration(
       rootFolder: '/home/skywalker/100DaysOfDart',
     );

     // or if we are doing scala
     var configS = Configuration(
       rootFolder: '/home/skywalker/100DaysOfScala',
       programmingLanguage: 'Scala',
     );
   }
   #+END_SRC


** Named Constructors
   Until now everything should have looked familiar to the C++/Java programmer,
   from here the fun part starts. So we saw the ~default constructor~, but in
   dart we can have any number of constructors with names. 

   Let's saw we need to make a Configuration with data from a ~Map~, we would
   call that constructor ~fromMap~ and here's how you would implement it.

   #+BEGIN_SRC dart
   class Configuration {
     String rootFolder;
     String programmingLanguage;

     // The default configuration
     Configuration({this.rootFolder, this.programmingLanguage = 'dart'}) {}

     // Named constructor
     Configuration.fromMap(Map<String, String> map) {
       this.rootFolder = map['rootFolder'];
       this.programmingLanguage = map['programmingLanguage'];
     }

     String toString() {
       return 'rootFolder: $rootFolder, programmingLanguage: $programmingLanguage';
     }
   }

   void main() {
     var config = Configuration.fromMap({
       'rootFolder': '/home/skywalker/100DaysOfCode',
       'programmingLanguage': 'Dart',
     });

     print(config);
   }
   #+END_SRC

** Initializer List

** Redirecting Constructor

** Constant Constructor

** Factory Constructors 



